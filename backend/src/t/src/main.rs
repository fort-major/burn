use candid::Principal;
use ic_verifiable_credentials::{
    issuer_api::CredentialSpec, validate_ii_presentation_and_claims, VcFlowSigners,
};
use std::time::{Duration, SystemTime};

pub fn main() {
    let _pk = "[48, 129, 130, 48, 29, 6, 13, 43, 6, 1, 4, 1, 130, 220, 124, 5, 3, 1, 2, 1, 6, 12, 43, 6, 1, 4, 1, 130, 220, 124, 5, 3, 2, 1, 3, 97, 0, 129, 76, 14, 110, 199, 31, 171, 88, 59, 8, 189, 129, 55, 60, 37, 92, 60, 55, 27, 46, 132, 134, 60, 152, 164, 241, 224, 139, 116, 35, 93, 20, 251, 93, 156, 12, 213, 70, 217, 104, 95, 145, 58, 12, 11, 44, 197, 52, 21, 131, 191, 75, 67, 146, 228, 103, 219, 150, 214, 91, 155, 180, 203, 113, 113, 18, 248, 71, 46, 13, 90, 77, 20, 80, 95, 253, 116, 132, 176, 18, 145, 9, 28, 95, 135, 185, 136, 131, 70, 63, 152, 9, 26, 11, 170, 174]";
    let pk = _pk
        .trim_start_matches("[")
        .trim_end_matches("]")
        .split(",")
        .map(|chunk| chunk.trim().parse().expect("Unable to parse ic root key"))
        .collect::<Vec<u8>>();

    let signers = VcFlowSigners {
        ii_canister_id: Principal::from_text("rdmx6-jaaaa-aaaaa-aaadq-cai").unwrap(),
        ii_origin: "https://identity.ic0.app/".into(),
        issuer_canister_id: Principal::from_text("qgxyr-pyaaa-aaaah-qdcwq-cai").unwrap(),
        issuer_origin: "https://id.decideai.xyz".into(),
    };

    let spec = CredentialSpec {
        credential_type: format!("ProofOfUniqueness"),
        arguments: None,
    };

    let duration_since_epoch = SystemTime::now()
        .duration_since(SystemTime::UNIX_EPOCH)
        .unwrap();
    let timestamp_nanos = duration_since_epoch.as_nanos(); // u128

    let jwt = "eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0..";
    let my_id =
        Principal::from_text("o6aq3-q22a6-iw4tg-hgdou-dm7la-fy3u4-fddvm-zel7o-gagjn-diequ-bae")
            .unwrap();

    validate_ii_presentation_and_claims(&jwt, my_id, &signers, &spec, &pk, timestamp_nanos)
        .expect("Unable to validate");
}
